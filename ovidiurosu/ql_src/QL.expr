// Default Form
form Box1HouseOwning {
    hasSoldHouse: "Did you sell a house in 2010?" boolean
    hasBoughtHouse: "Did you by a house in 2010?" boolean
    hasMaintLoan: "Did you enter a loan for maintenance/reconstruction?" boolean
    if (hasSoldHouse) {
        sellingPrice: "Price the house was sold for:" money
        privateDebt: "Private debts for the sold house:" money
        valueResidue: "Value residue:" money(sellingPrice - privateDebt)
    }
}

form nestedIfs {
    a: "a?" boolean
    if (a) {
        b: "(a is true) b:" money
        c: "c:" money
        d: "b-c:" money(b - c)
    } else {
        e: "(a is false) e:" money
        if (e > 2) {
            f: "(e > 2) f:" money
            if (f > 4) {
                g: "(f > 4) g:" money
            }
        } else {
            h: "(e <= 2) h:" money
        }
    }
    z: "z:" integer
}

form Exceptions {
    // Division by 0
    if (10 / 0 > 0) { z: "division by 0: " string}
    if (10.0 / 0 > 0) {}
    a: "(division by 0) a:" money
    b: "b:" money
    c: "a/b" money(a/b)

    // Type mismatch
    d: "(type mismatch) d:" integer
    e: "e:" integer
    f: "d/e:" integer(d/e)
}

form others
{
    howBad: "How bad?" ("good", "bad", "don't know") //TODO implement enums
    whatDate: "What date?" date
}

/*
form typeChecker
{
    // reference to undefined questions
    if (a) {}

    // duplicate question declarations with different types
    b: "b?" boolean
    b: "b'?" boolean
    b: "b other:" decimal

    // conditions that are not of the type boolean
    if (5) {}

    // operands of invalid type to operators
    if (10 - false && 20 < "string") {}

    // cyclic dependencies between questions (Observation! variables need to be declared before being used)
    x: "X?" boolean
    x: "X second?" boolean(x)
    // if (x) { y: "Y?" boolean }
    // if (y) { x: "X?" boolean } //TODO this will always hide x => and y

    // duplicate labels (warning)
    c: "c?" boolean
    c: "c?" boolean
    d: "c?" money
}
// duplicate form ids
form typeChecker {}
*/
