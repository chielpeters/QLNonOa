form Box1HouseOwning {
 hasSoldHouse: "Did you sell a house in 2010?" boolean
 hasBoughtHouse: "Did you buy a house in 2010?" boolean
 hasMaintLoan: "Did you enter a loan for maintenance/reconstruction?" boolean
 
 // This should lead to two exceptions, one type and one duplicate label.
 hasSoldHouse: "Did you sell a house in 2010?" integer

 // |bla| is defined further down.
 if (bla) test: "test textual input:" string

 bla: "Declaration of bla:" boolean

 // This should also result in two exceptions.
 hasSoldHouse: "test textual input" string
 
 if (hasSoldHouse) {
   sellingPrice: "Price the house was sold for:" integer
   privateDebt: "Private debts for the sold house:" integer
   valueResidue: "Value residue:" integer(sellingPrice - privateDebt)
 }
 else {
   sellingPrice: "No income from selling house" integer(0)
   privateDebt: "No private debt" integer(0)
   // Another duplicate label:
   valueResidue: "Value residue:" integer(sellingPrice - privateDebt)
 }

 validIntExpr: "This is a valid int expression"
   integer(sellingPrice / privateDebt - (privateDebt * sellingPrice))
 validBoolExpr: "This is a valid boolean expression"
   boolean(sellingPrice < 100000 && privateDebt > 50000 ||
           privateDebt >= sellingPrice - 20000)

 // |hasSoldHouse| invalid type, parentheses invalid type and args of parens
 // invalid type.
 invalidIntExpr: "Multiple integer errors"
   integer(hasSoldHouse * sellingPrice + privateDebt - (sellingPrice || privateDebt))

 // Invalid parentheses expression, |valueResidue| invalid type.
 invalidBoolExpr: "Multiple boolean errors"
   boolean(hasSoldHouse || !hasSoldHouse && (sellingPrice - privateDebt) || valueResidue)

 // An argument (|rubbish|) was undefined.
 undefinedExpr: "Argument undefined" integer(sellingPrice + rubbish)

 // Expression in computation is of wrong type and arguments too.
 wrongCompType: "Wrong computation type" integer(sellingPrice || privateDebt)

 // Equality of different types.
 wrongEquality: "Incorrect equality computation" boolean(hasSoldHouse == sellingPrice)

 // Cyclic dependencies stuff.
 if (hasSoldHouse) { hasBoughtHouse: "hasBoughtHouse input" boolean}
 if (hasBoughtHouse) {hasSoldHouse: "hasSoldHouse input" boolean}

 hasBoughtHouse: "invert hasSoldHouse" boolean(!hasSoldHouse)
 hasSoldHouse: "invert hasBoughtHouse" boolean(!hasBoughtHouse)
 hasBoughtHouse: "invert itself" boolean(!hasBoughtHouse)
}